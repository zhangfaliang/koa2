
面试
一 css 
  1.1 flex 能正常使用   对flex 1理解不够准确 合成出现顺序说反了
   1.2 bfc 的理解  能说出一触发场景，和定义
   1.3 @media 能正常使用
二 原生js

  2.1 js的基本类型 和 引用类型的区别 
       深度 广度   
  2.2 js隐式转换  
         简单解
         深度一般（toprimtive）
    
  2.3 深拷贝 和 浅copy  
         能够说出区别，有一定的思路写一个深拷贝
  2.4 垃圾回收  
          知道引用类型，不知道引用计数

 2.5 闭包 的理解
       基本理解
      

 2.6 防抖 、节流  
      有一定理解，能够说话使用场景，但是不太内部源码

 2.7  eventloop  
      对eventloop  能够理解，但是对队列概念不太熟悉

三 设计模式
  3.1 发布订阅
      针对rendux场景，不能认清发布订阅，但是有上进心
  3.2 发布订阅  观察者区别 
            不能够区别
四 优化
  4.1虚拟滚动 
      有思路，能够说出部分原理，引导后能够说出思路

五 react 
 5.1 react 组件抽取
    回答还可以，能够分清业务组件和纯组件
 5.2 redux
   会使用不了解原理
   
六http&&https 
 6.1 状态码
    了解部分
 6.1 https 和 http的区别 
    能够说出一二
  6.3  https 加密方式 ssl
    了解大致，具体流程比较迷糊

七 es6 
  7.1 对es6的使用和es5的区别
     在提示下能够想到变量提示、一些便捷语法
    7.2 es6 继承和es5 的区别 
       能够说出 原型+call继承
    7.3 Iterator 的认识
   	能够认识Iterator，对结构赋值原理不了解
   7.4  es6 proxy  es6 object.defineproperty
     能够说出区别，和使用方式



  1前端把控
   1.1 脚手架配置搭建 （create-react-app,umi（目前使用） ） 内部使用项目

   1.2 umi和 create-react-app, 差别，能说出umijs的部分差别
   1.3 线上怎么监听问题和数据
      回答没有做过，没有做监听   有思虑 埋点
  
   1.5 前端优化 （有些欠缺）
      webpack 优化（自带）

   1.6 怎么提高开发效率  
      hooks 
      组件开发
      Monorepo的使用 


 2 react方面
   2.1 hooks 使用 比较熟悉
    2.1.1 useEffect详解  可以
    2.1.2 useCallBack >>  useMemo 能够区分
    2.1.3 使用组件化开发 
    2.1.4 理解纯组件 
    2.1.5 理解业务组件
    2.1.6 前端路由   可以说出hash、history的区别
   2.2 setState 做了些事情了解还可以，能够区分setState什么时候是异步什么时候是同步

3 前端基础
 3.1 js的基本类型 和 引用类型的区别  可以正常讲解存储位置，联想到到堆地址和栈
 3.2 闭包的形式  知道闭包形成的原理 （对象引用）
 3.3 垃圾回收     知道引用类型，标记清楚 
 3.4 防抖 、节流   可讲出使用，和区别 


 4 es6的常见使用
   4.1 es6常用方法或者属性 能够说出常用属性
   4.2 extends 能够说出  原型继承和call继承
     
 5 http 方向
  5.1常用状态吗 能够分出1xx-5xx、了解 301 、302 的差别
  5.2https 和http 区别  能够分出加密方式和 非对称加密、 对称加密

 6 笔试题 
    实现该函数，start()后等1秒输出1，再等2秒输出2，再等3秒输出3.
    new Queue()
    .task(1000,()=>console.log(1))
    .task(2000,()=>console.log(2))
    .task(3000,()=>console.log(3))
    .start()
    能够写出

   
 总结  
  
   react 使用比较熟练
   js基础不错
   优化方面有点欠缺
   前端把控 一般
   笔试应变 不错



     前端整体把控
架构选型考虑（目前 被选人使用的 b 端使用 umi, 考试 c 端 create-react-app, 商城 nuxtjs 结合 node（ssr））
1 问题 为什么选择这些加脚手架
回答 start 数量比较多，别人推荐

2 怎么提高开发效率  
 回答 技术栈升级 、vit 打包
js 插件（发布到 npm）
公共静态页配置放在 cdn

3 线上怎么监听问题和数据
回答 1 使用 sentry 监听错误
2 使用第三方埋点
3 上线前对代码没有验证质量方法
4 前端优化
使用脚手架的自带优化
使用 azysizes 按需加载
对 node 服务器有压测，和 ssr 渲染有一定理解
对虚拟加载不太理解

前端整体把控总结
1 对架构选型考虑不全面，没有自己的理解
2 提高开发效率，有一定的使用，方法单一
3 线上怎么监听问题和数据，常规使用
4 前端优化 ，对服务器端有一定理解，前端方面了解不深

前端基础问题
1 js 问题
1 方法执行后都做了些什么（期望能够把 活动对象的、this、作用域、闭包、垃圾回收 连贯起来）
回答 对 js 运行机制不是太熟悉，答案中包含了 this、闭包
2 js 隐式转换
回答 tostring() valueOf(),对 valueOf 的返回值不熟悉
3 垃圾回收  
 回答 计数方法、标记清楚 对计数方法、标记清楚 不够了解，从计数方法中可以看出对闭包不理解

     2 设计模式
       问 发布订阅、观察者区别，redux使用的是那种设置模式（期望对发布订阅和观察者能够分清，讲一下redux源码）
         回答 不是太了解 发布订阅、观察者区别，redux是观察者（错误），没有讲出redux

     3 网络层了解
      问 浏览器输入地址做了些什么(期望能够详细的描述 网络每层的作用和浏览器的渲染和外联阻塞)
        答 大致的描述 dns解析->tcp连接->https连接->响应

前端基础问题测试总结
1 对 js 基础了解不彻底
2 对常用设计模式不了解
3 对一个请求运行大致了解，对 https 连接和 tcp3 次握手连接、tcp4 次握手断开不深

react
1 前端路由实现的（期望能够分出 hash 路由和 history 路由的了解和实现以及）
回答 能够分出 hash 路由和 history 路由的实现和 history 刷新问题
2 setState 执行后做了什么（期望了解源码）
回答 没有回答出源码逻辑，简单的回答一些表面执行
3 redux 的设计模式（期望讲出 redux 源码和设计）
回答 没有回答出来

react 测试总结
1 对前端路由实现了解的比较透彻
2 对 setState 运行不够了解
3 对 redux 的设计模式不够了解

    总结  （针对p7打分）
    1 前端整体把控还可以，对技术选型比较随意，测试代码方面需要在加深，对前端优化需要加深，对node优化有一定理解 打分（70）
    2 前端基础 不够扎实，比较短缺（网络层和设计模式比较差）（打分50）
    3 react基础 redux的设计模式不够了解，setState运行不够了解 （打分60）
